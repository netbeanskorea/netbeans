<%@ page language="java" contentType="text/html; charset=UTF-8" pageEncoding="UTF-8"%>
<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>
<!-- 페이지 타이틀 영역  -->
<div class="titleArea" id="views">View Rendering</div>
<!-- 페이지 타이틀 영역  -->


<!-- 페이지 Content  start -->
<div class="page-content">

<!-- sub title  -->
<h1 id="viewsRender"><font size="5px">View Rendering</font></h1>
<!-- sub title  -->

<!-- comment 영역  -->
<h3>
<pre>스프링은 브라우저에서 모델을 렌더링할 수 있게 하는 뷰 리졸버 (view resolver)를 제공한다.
<!-- 뷰 기술로 JSP를 사용하는 예제에 UrlBasedViewResolver를 사용하였다. 
이 뷰 리졸버는 뷰 이름을 URL로 변환하고 뷰를 렌더링하는 RequestDispatcher로 요청을 처리한다. -->

다음은 뷰리졸버를 정의하는 방법이다.
<pre><code class="xml">&lt;bean id="viewResolver" class="org.springframework.web.servlet.view.UrlBasedViewResolver"&gt;   
 &lt;property name="viewClass" value="org.springframework.web.servlet.view.JstlView"/&gt;   
 &lt;property name="prefix" value="/WEB-INF/jsp/"/&gt;  
 &lt;property name="suffix" value=".jsp"/&gt; 
&lt;/bean&gt;</code></pre>

jsp명은 다음과 같이 문자열을 리턴하면 호출된다.
다음은 모델에 어트리뷰트를 추가하여 jsp뷰를 호출하는 예제이다 .
<pre><code>@RequestMapping (value="html", method=RequestMethod.GET)
public String prepare(Model model) {
	model.addAttribute("foo", "bar");
	model.addAttribute("fruit", "apple");
	return "views/html";
}</code></pre>

URL로 들어온 경로를 뷰네임으로 그대로 쓰고자 할경우 다음과 같이 리턴값을 명시하지 않는다.
<pre><code>@RequestMapping (value="/viewName", method=RequestMethod.GET)
public void usingRequestToViewNameTranslator(Model model) {
	model.addAttribute("foo", "bar");
	model.addAttribute("fruit", "apple");
}</code></pre>

pathVariables를 이용하여 뷰에 전달하고자 할경우는 별도로 모델에 바인딩하지 않는다
<pre><code>@RequestMapping (value="pathVariables/{foo}/{fruit}", method=RequestMethod.GET)
public String pathVars(@PathVariable String foo, @PathVariable String fruit) {
	return "views/html";
}</code></pre>

pathVariables를 이용하여 자바빈으로 전달할경우 다음과 같이 사용한다.
<pre><code>@RequestMapping (value="dataBinding/{foo}/{fruit}", method=RequestMethod.GET)
public String dataBinding(@Valid JavaBean javaBean, Model model) {
	return "views/dataBinding";
}</code></pre>
</pre>
</h3>
<!-- comment 영역  -->



<!-- sample 실행 영역  -->
<h1 id="jspview"><font size="5px">Example</font></h1>
<div class="sample">
	<ul>
		<li>
			<a href="#" onClick="goNavigate('<%=request.getContextPath()%>/views/html.frag');">HTML generated by JSP template</a>
		</li>
		<li>
			<a href="#" onClick="goNavigate('<%=request.getContextPath()%>/views/viewName.frag');">DefaultRequestToViewNameTranslator convention</a>
		</li>
		<li>
			<a href="#" onClick="goNavigate('<%=request.getContextPath()%>/views/pathVariables/bar/apple.frag');" >Using path variables in a view template</a>
		</li>
		<li>
			<a href="#" onClick="goNavigate('<%=request.getContextPath()%>/views/dataBinding/bar/banana.frag');" >Data binding with URI variables</a>
		</li>
	</ul>
</div>
<!-- sample 실행 영역  -->


<!-- sample 소스코드 영역  -->
<pre>
<code class="java">
</code>
</pre>
<pre>
<code class="javascript">
package nexcore.sprout.showcase.mvc.views;

import javax.validation.Valid;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

@Controller
@RequestMapping("/views/*")
public class ViewsController {

	@RequestMapping(value="html", method=RequestMethod.GET)
	public String prepare(Model model) {
		model.addAttribute("foo", "bar");
		model.addAttribute("fruit", "apple");
		return "views/html";
	}
	
	@RequestMapping(value="/viewName", method=RequestMethod.GET)
	public void usingRequestToViewNameTranslator(Model model) {
		model.addAttribute("foo", "bar");
		model.addAttribute("fruit", "apple");
	}

	@RequestMapping(value="pathVariables/{foo}/{fruit}", method=RequestMethod.GET)
	public String pathVars(@PathVariable String foo, @PathVariable String fruit) {
		// No need to add @PathVariables "foo" and "fruit" to the model
		// They will be merged in the model before rendering
		return "views/html";
	}

	@RequestMapping(value="dataBinding/{foo}/{fruit}", method=RequestMethod.GET)
	public String dataBinding(@Valid JavaBean javaBean, Model model) {
		// JavaBean "foo" and "fruit" properties populated from URI variables 
		return "views/dataBinding";
	}

}
</code>
</pre>
<!-- sample 소스코드 영역  -->

</div>
<!-- 페이지 Content  end -->

