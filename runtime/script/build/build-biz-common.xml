<?xml version="1.0" encoding="UTF-8"?>

<project name="NEXCORE Build Common" default="description" basedir=".">

	<!-- ################################################################## -->
	<!-- ## One Stop Build ### Weblogic Deployer ########################## -->
	<!-- ################################################################## -->

	<!-- ################################################################## -->
	<!-- ## One Stop Build ### common property ############################ -->
	<!-- ################################################################## -->

	<property name="overwrite.resource" value="true" />
	<property name="verbose" value="false" />

	<property name="target" value="${NEXCORE_HOME}" />
	<!-- <property name="analysis.src" value="${NEXCORE_HOME}/src/analysis" /> -->
	<property name="coverage.flag" value="false" />
	<property name="component.model.pojo" value="false" />
	<property name="component.validation.enabled" value="false" />
	<property name="component.validation.failToException" value="true" />
	<property name="component.validation.warnToException" value="true" />
	<property name="component.validation.fixedLengthParentClassXd" value="" />

	<pathconvert property="libclasspath">
		<path location="${app.ear.common.classes.path}" />
		<path>
			<fileset dir="${NEXCORE_HOME}/lib">
				<include name="*.jar" />
			</fileset>
			<fileset dir="${app.ear.common.lib.path}">
				<include name="*.jar" />
			</fileset>
		</path>
	</pathconvert>

	<pathconvert property="antlibclasspath">
		<path>
			<fileset dir="${NEXCORE_HOME}/lib">
				<include name="*.jar" />
			</fileset>
		</path>
	</pathconvert>

	<condition property="isCoverage">
		<equals arg1="${coverage.flag}" arg2="true" />
	</condition>

	<condition property="isComponentValidation">
		<equals arg1="${component.validation.enabled}" arg2="true" />
	</condition>

	<condition property="isWebSphere">
		<and>
			<!-- Only EJB Component Model -->
			<equals arg1="${component.model.pojo}" arg2="false" casesensitive="false" trim="true" />
			<or>
				<equals arg1="${was}" arg2="websphere6" casesensitive="false" trim="true" />
				<equals arg1="${was}" arg2="websphere7" casesensitive="false" trim="true" />
			</or>
		</and>
	</condition>
	<condition property="isJBoss">
		<and>
			<!-- Only EJB Component Model -->
			<equals arg1="${component.model.pojo}" arg2="false" casesensitive="false" trim="true" />
			<or>
				<equals arg1="${was}" arg2="jboss4" casesensitive="false" trim="true" />
				<equals arg1="${was}" arg2="jboss5" casesensitive="false" trim="true" />
			</or>
		</and>
	</condition>

	<!-- ################################################################## -->
	<!-- ## One Stop Build ### check property ############################# -->
	<!-- ################################################################## -->
	<target name="check.property" unless="NEXCORE_HOME">
		<echo message="ERROR: " />
		<echo message="      define property 'NEXCORE_HOME' first " />
		<echo message="      in your nexcore.build.properties" />
		<echo message="      before depoying" />
		<fail message="ERROR: Please check 'NEXCORE_HOME' property in 'nexcore.build.properties' file." />
	</target>
	<target name="description" description="" depends="check.property">
		<echo>test ant call</echo>
		<echo>${project.name}</echo>
		<echo>${component.fqId}</echo>
		<echo>${basedir}</echo>
	</target>

	<!-- ################################################################## -->
	<!-- ## absolute path check start (2010.02.04 jihwan.cha)  ############ -->
	<!-- ################################################################## -->
	<target name="check.property.absolute.path">
		<property name="antfile.absolute.path" value="" />
		<echo>antfile.absolute.path : ${antfile.absolute.path}</echo>
		<condition property="isnotabsolutepath">
			<equals arg1="" arg2="${antfile.absolute.path}" />
		</condition>
	</target>

	<target name="ejb-jar.source.dir.setting" if="isnotabsolutepath">
		<property name="antfile.absolute.path.dir" value="./" />
	</target>

	<target name="ejb-jar.source.dir.setting.absolute.path">
		<dirname property="antfile.absolute.path.dir.temp" file="${antfile.absolute.path}" />
		<property name="antfile.absolute.path.dir" value="${antfile.absolute.path.dir.temp}/" />
	</target>
	<!-- ################################################################## -->
	<!-- ## hudson login finish############################################ -->
	<!-- ################################################################## -->


	<!-- ################################################################## -->
	<!-- ## EJB Deployment ################################################ -->
	<!-- ################################################################## -->
	<!-- 2010.02.04 jihwan.cha -->
	<!--target name="all-ejb" depends="check.property" -->
	<target name="all-ejb" depends="check.property,check.property.absolute.path,ejb-jar.source.dir.setting,ejb-jar.source.dir.setting.absolute.path">

		<!-- mkdir.src for analysis -->
		<!-- mkdir dir="${analysis.src}/${component.fqId}.jar/${component.path}" / -->
		<!-- copy.src for analysis -->
		<!-- copy todir="${analysis.src}/${component.fqId}.jar/${component.path}" verbose="true" preservelastmodified="true">
			<fileset dir=".">
				<include name="biz/*.java" />
				<include name="db/*.xsql" />
				<include name="ejb/*.java" />
				<include name="consts/*.java" />
				<include name="io/*.xio" />
				<include name="vo/*.java" />
			</fileset>
		</copy -->

		<property name="ejb-jar.working" value="${target}/build/${component.fqId}" />
		<property name="ejb-jar.destfile" value="${ejb-jar.working}.jar" />
		<property name="ejb-jar.runtime" value="${app.ear.ejb.path}/${component.fqId}.jar" />

		<!-- delete.ejb-jar -->
		<delete dir="${ejb-jar.working}" failonerror="false" />
		<delete file="${ejb-jar.destfile}" failonerror="false" />
		<delete file="${ejb-jar.working}Client.jar}" failonerror="false" />

		<!-- mkdir.ejb-jar -->
		<mkdir dir="${ejb-jar.working}" />
		<!-- compile.classes -->
		<!-- 2010.02.23 jihwan.cha -->
		<!--javac srcdir="./" destdir="${ejb-jar.working}" includes="**/*.java" excludes="**/*Test.java" encoding="utf-8" debug="true"-->
		<!--touch file="${app.ear.path}/classes/touchtest"/-->
		<javac srcdir="${antfile.absolute.path.dir}" destdir="${ejb-jar.working}" includes="**/*.java" excludes="**/*Test.java" encoding="utf-8" debug="true">
			<classpath>
				<pathelement path="${libclasspath}" />
				<!-- pathelement path="${NEXCORE_CLASSPATH};${app.ear.common.lib.path}/${common.jar.name}.jar;${add.classpath}" / -->
				<!-- pathelement path="${app.ear.common.classes.path}"/ -->
				<!-- <pathelement path="${app.ear.path}/classes"/> Can not reference other component's classes. -->
				<!-- fileset dir="${app.ear.common.lib.path}" includes="*.jar" / -->
			</classpath>
		</javac>

		<!-- component validation -->
		<antcall target="component.validation" />

		<!-- instrument for coverage -->
		<antcall target="coverage.instrument" />

		<!-- copy.ejb.META-INF -->
		<!--
		<copy todir="${ejb-jar.working}" verbose="true" preservelastmodified="true">
			<fileset dir="${antfile.absolute.path.dir}ejb">
				<include name="META-INF/*" />
			</fileset>
		</copy>
		-->

		<!-- make.ejb-jar -->
		<!--
		<property name="jar.classpath" value="" />
		<jar destfile="${ejb-jar.destfile}" duplicate="add">
			<fileset dir="${ejb-jar.working}">
				<include name="**/*" />
			</fileset>
			<manifest>
				<attribute name="Built-By" value="Nexcore Framework" />
				<attribute name="Class-Path" value="${jar.classpath}" />
			</manifest>
		</jar>
		-->

		<!-- make.ejb-jar.client -->
		<!--
		<jar destfile="${ejb-jar.working}Client.jar" duplicate="add">
			<fileset dir="${ejb-jar.working}">
				<include name="${component.path}/ejb/${component.id}.class" />
				<include name="${component.path}/ejb/${component.id}Home.class" />
				<include name="META-INF/ejb-jar.xml" />
				<include name="META-INF/weblogic-ejb-jar.xml" />
			</fileset>
		</jar>
		-->

		<!--
		<delete dir="${app.ear.path}/classes/${component.path}" failonerror="false" />
		<copy todir="${app.ear.path}/classes" overwrite="true" >
			<fileset dir="${ejb-jar.working}">
				<include name="**/*.class" />
			</fileset>
		</copy>
		-->
		<!-- 2012.08.21 jihwan.cha -->
		<echo>synchronizing files for class</echo>
		<sync todir="${app.ear.path}/classes/${component.path}" overwrite="${overwrite.resource}" verbose="${verbose}">
			<fileset dir="${ejb-jar.working}/${component.path}">
				<include name="**/*.class" />
			</fileset>
		</sync>

		<!-- websphere specific -->
		<!--
		<antcall target="websphere-support" />
		-->

		<!-- deploy.ejb-jar -->
		<!-- Pojo ClassLoader 방식에서는 ejb jar 파일을 생성하지 않는다.
		<copy todir="${app.ear.ejb.path}/YAHO" overwrite="${overwrite.resource}" preservelastmodified="true" file="${ejb-jar.destfile}" flatten="true" />
-->
		<!-- it does not need in general and moreover, it sometimes hinder EJB auto-deploy.
		<copy todir="${app.ear.common.lib.path}" overwrite="${overwrite.resource}" preservelastmodified="true" file="${ejb-jar.working}Client.jar" flatten="true" />
	    -->

		<!-- jboss specific -->
		<!--
		<antcall target="jboss-support" />
		-->

		<!-- all-xsql.xml -->
		<antcall target="all-xsql.xml">
		</antcall>

		<!-- all-io.xml -->
		<antcall target="all-xio.xml">
		</antcall>

		<!-- all-component.xml -->
		<antcall target="all-component.xml">
		</antcall>

		<!-- ejb-jar redeploy -->
		<!--
		<antcall target="all-ejb-restart.ear" />
		-->

	</target>

	<target name="websphere-support" if="isWebSphere">
		<!-- 1) WsEjbDeploy 를 실행하여 ejb-jar를 변환한다. -->
		<!-- EJBDeploy inputEar workingDirectory outputEar [options] -->
		<exec failifexecutionfails="true" dir="${websphere.home}/profiles/${websphere.profile}/bin" executable="cmd">
			<arg value="/c" />
			<arg line="ejbdeploy" />
			<arg value="${target}/build/${component.fqId}.jar" />
			<arg value="${target}/build/temp_ejbdeploy_dir" />
			<arg value="${target}/build/ejbdeployed_${component.fqId}.jar" />
			<arg value="-cp" />
			<arg value="${libclasspath}" />
		</exec>

		<!-- 2) 변환전 기존 파일은 이름을 변경하여 보존한다. ( beforedeploy_XXX.jar 로 ) -->
		<copy file="${target}/build/${component.fqId}.jar" tofile="${target}/build/beforedeploy_${component.fqId}.jar" />
		<copy file="${target}/build/ejbdeployed_${component.fqId}.jar" tofile="${target}/build/${component.fqId}.jar" />
		<delete file="${target}/build/ejbdeployed_${component.fqId}.jar" />


		<!-- 3) 컴포넌트 jar 파일를  deploy 
		<echo message=" 기존 컴포넌트 jar의 디플로이 여부를 체크한다. " />
		<echo message=" 기존 컴포넌트 jar의 존재여부 체크   : ${websphere.home}/profiles/${websphere.profile}/config/cells/${websphere.cell}/applications/${app.ear.name}.ear/deployments/${app.ear.name}/ejb/${component.fqId}.jar" />
		<available file="${websphere.home}/profiles/${websphere.profile}/config/cells/${websphere.cell}/applications/${app.ear.name}.ear/deployments/${app.ear.name}/ejb/${component.fqId}.jar" property="check.exists.jar" />
		<antcall target="all-ejb-deploy.ejb.init" />
		<antcall target="all-ejb-deploy.ejb.reload" />
		-->

	</target>

	<!-- ################################################################## -->
	<!-- ## deploy - 처음 빌드.       ####################################### -->
	<!-- ################################################################## -->
	<!-- 기존 컴포넌트 jar의 존재하지 않은 경우 실행한다. 처음 빌드하는 경우. -->
	<target name="all-ejb-deploy.ejb.init" unless="check.exists.jar">
		<echo message="deploy - 처음 빌드." />

		<!-- 위에서 처리한 ejb-jar 파일을 wsadmin 을 이용하여 EarContent 응용프로그램에 add/update한다. -->
		<echo message="$AdminApp update ${app.ear.name} modulefile {-operation addupdate -contents ${target}/build/${component.fqId}.jar -contenturi ejb/${component.fqId}.jar -nodeployejb}" />

		<echo message="update ejb start ====================" />
		<echo file="${NEXCORE_HOME}/build/tmp_current.script" append="false">
	        $AdminApp update ${app.ear.name} modulefile {-operation addupdate -contents ${target}/build/${component.fqId}.jar -contenturi ejb/${component.fqId}.jar -nodeployejb}
	        $AdminConfig save
	    </echo>
		<exec failifexecutionfails="true" dir="${websphere.home}/profiles/${websphere.profile}/bin" executable="cmd">
			<arg value="/c" />
			<arg line="wsadmin" />
			<arg line="-wsadmin_classpath " />
			<arg path="${libclasspath}" />
			<arg line="-lang jacl" />
			<arg line="-f" />
			<arg path="${NEXCORE_HOME}/build/tmp_current.script " />
		</exec>
		<delete file="${NEXCORE_HOME}/build/tmp_current.script" />

		<exec failifexecutionfails="true" dir="${websphere.home}/profiles/${websphere.profile}/bin" executable="cmd">
			<arg value="/c" />
			<arg line="wsadmin" />
			<arg value="-c" />
			<arg value="$AdminApp update ${app.ear.name} modulefile {-operation addupdate -contents ${target}/build/${component.fqId}.jar -contenturi ejb/${component.fqId}.jar -nodeployejb}" />
		</exec>

	</target>

	<!-- ################################################################## -->
	<!-- ## deploy - 리로드.       ####################################### -->
	<!-- ################################################################## -->
	<!-- 기존 컴포넌트 jar의 존재하는 경우 실행한다. -->
	<target name="all-ejb-deploy.ejb.reload" if="check.exists.jar">
		<echo message="deploy - 리로드." />

		<!-- 컴파일된 컴포넌트 jar에서 환경설정 파일을 추출한다. -->
		<unjar dest="${target}/build/${component.fqId}" overwrite="true" src="${target}/build/${component.fqId}.jar">
			<fileset dir=".">
				<include name="META-INF/*" />
			</fileset>
		</unjar>

		<!-- 컴포넌트 jar 환경설정 파일를 build 디렉토리에서 IBM config 디렉토리로 복사한다. -->
		<copy todir="${websphere.home}/profiles/${websphere.profile}/config/cells/${websphere.cell}/applications/${app.ear.name}.ear/deployments/${app.ear.name}/ejb/${component.fqId}.jar/META-INF" verbose="true" preservelastmodified="false" overwrite="true">
			<fileset dir="${target}/build/${component.fqId}/META-INF">
				<include name="*" />
			</fileset>
		</copy>

		<!-- 컴포넌트 jar 파일를 build 디렉토리에서 EarContent 디렉토리로 복사한다. -->
		<copy file="${target}/build/${component.fqId}.jar" tofile="${app.ear.ejb.path}/${component.fqId}.jar" />

	</target>


	<!-- ################################################################## -->
	<!-- ## WAS Deployment ################################################ -->
	<!-- ################################################################## -->
	<!-- 기존 컴포넌트 jar의 존재하는 경우 실행한다. -->
	<target name="all-ejb-restart.ear" if="check.exists.jar">
		<echo message="" />
		<echo message="" />
		<echo message="" />
		<echo message="-------------------------------------------" />
		<echo message="- 변경 사항이 반영되기를 기다려 주십시오. " />
		<echo message="-------------------------------------------" />
		<echo message="....." />
		<echo message=" ear이 자동으로 재시작 됩니다." />
		<echo message="....." />
	</target>

	<!-- ################################################################## -->
	<!-- ## component Deployment ########################################## -->
	<!-- ################################################################## -->
	<target name="all-component.xml" depends="check.property">

		<echo>synchronizing files for bizunit</echo>
		<sync todir="${app.ear.path}/env/component/${component.fqId}" overwrite="${overwrite.resource}" verbose="${verbose}">
			<!-- 2010.02.04 jihwan.cha -->
			<!--fileset dir="./biz"-->
			<fileset dir="${antfile.absolute.path.dir}biz">
				<include name="*.bizunit" />
			</fileset>
		</sync>

		<echo>copying ${component.fqId}.component file</echo>
		<copy todir="${app.ear.path}/env/component" overwrite="${overwrite.resource}" flatten="true" verbose="${verbose}">
			<!-- 2010.02.04 jihwan.cha -->
			<!--fileset dir="."-->
			<fileset dir="${antfile.absolute.path.dir}">
				<include name="${component.fqId}.component" />
			</fileset>
		</copy>

	</target>

	<!-- ################################################################## -->
	<!-- ## xsql Deployment ############################################### -->
	<!-- ################################################################## -->
	<target name="all-xsql.xml" depends="check.property">

		<echo>synchronizing files for xsql </echo>
		<sync todir="${app.ear.path}/env/xsql/${component.fqId}.jar/${component.path}/db" overwrite="${overwrite.resource}" failonerror="false" verbose="${verbose}">
			<fileset dir="${antfile.absolute.path.dir}db">
				<include name="*.xsql" />
			</fileset>
		</sync>

	</target>


	<!-- ################################################################## -->
	<!-- ## IO Layout Deployment ############################################### -->
	<!-- ################################################################## -->
	<target name="all-xio.xml" depends="check.property">

		<echo>synchronizing files for xio </echo>
		<sync todir="${app.ear.path}/env/io/${component.fqId}.jar/${component.path}/io" overwrite="${overwrite.resource}" failonerror="false" verbose="${verbose}">
			<fileset dir="${antfile.absolute.path.dir}io">
				<include name="*.xio" />
			</fileset>
		</sync>

	</target>


	<!-- ################################################################## -->
	<!-- ## WEB Deployment ################################################ -->
	<!-- ################################################################## -->
	<target name="all-web" depends="check.property">

		<!-- Web파일-jsp/resource 복사 -->
		<copy todir="${app.ear.web.path}" overwrite="${overwrite.resource}" preservelastmodified="true" includeemptydirs="false">
			<!-- 2010.02.04 jihwan.cha -->
			<!--fileset dir="../../../../../../web" defaultexcludes="false"-->
			<fileset dir="${antfile.absolute.path.dir}../../../../../../web" defaultexcludes="false">
				<exclude name="WEB-INF/**" />
				<exclude name="**/.svn/**" />
				<exclude name="web.xml" />
				<include name="jsp/${web.path}/**/*" />
			</fileset>
		</copy>

	</target>


	<!-- ################################################################## -->
	<!-- ## WEB classed Deployment ######################################## -->
	<!-- ################################################################## -->
	<target name="all-web-classes" depends="check.property">

		<!-- compile.classes -->
		<javac srcdir="./" destdir="${app.ear.web.path}/WEB-INF/classes" includes="**/*.java" excludes="**/*Test.java" encoding="utf-8" debug="true">
			<classpath>
				<pathelement path="${libclasspath}" />
				<!-- pathelement path="${NEXCORE_CLASSPATH};${app.ear.common.lib.path}/${common.jar.name}.jar;${add.classpath}" / -->
			</classpath>
		</javac>
		<copy todir="${app.ear.web.path}/WEB-INF/classes" overwrite="${overwrite.resource}" preservelastmodified="true" includeemptydirs="false">
			<!-- 2010.02.04 jihwan.cha -->
			<!--fileset dir="./" defaultexcludes="false"-->
			<fileset dir="${antfile.absolute.path.dir}" defaultexcludes="false">
				<exclude name="**/.svn/**" />
				<exclude name="build-web.xml" />
				<include name="**/*.xml" />
				<include name="**/*.dtd" />
				<include name="**/*.properties" />
			</fileset>
		</copy>

	</target>

	<target name="jboss-support" if="jboss.touch.referencing.ejbfiles">
		<!-- JBoss -->
		<typedef name="jboss-touch-ejb" classname="nexcore.framework.build.antsupport.jboss.redeploy.TouchReferencingJars" classpath="${antlibclasspath}" />
		<jboss-touch-ejb file="${ejb-jar.runtime}">
			<check dir="${app.ear.ejb.path}">
				<include name="*.jar" />
				<exclude name="nexcore.*.jar" />
			</check>
		</jboss-touch-ejb>
	</target>

	<!-- ################################################################## -->
	<!-- ## component validation ############################## -->
	<!-- ################################################################## -->
	<target name="component.validation" if="isComponentValidation">
		<typedef name="component-validator" classname="nexcore.framework.build.validator.pojo.ComponentModelValidator" classpath="${antlibclasspath}" />

		<!-- 유효성 검증 -->
		<path id="component-validator.classpath">
			<pathelement path="${ejb-jar.working}" />
			<pathelement path="${libclasspath}" />

			<!--
			<pathelement path="${NEXCORE_CLASSPATH};${add.classpath}" />
		    <pathelement path="${app.ear.common.classes.path}"/>
		    <fileset dir="${app.ear.common.lib.path}" includes="*.jar" />
		    -->
		</path>
		<component-validator verbose="true" encoding="UTF-8" classpathRefid="component-validator.classpath" srcDir="${antfile.absolute.path.dir}" failToException="${component.validation.failToException}" warnToException="${component.validation.warnToException}" fixedLengthParentClassXd="${component.validation.fixedLengthParentClassXd}" />
	</target>

	<!-- ################################################################## -->
	<!-- ## instrument for Coverage ############################## -->
	<!-- ################################################################## -->
	<target name="coverage.instrument" if="isCoverage">
		<ant antfile="${NEXCORE_HOME}/script/build/build-test-coverage.xml" target="coverage.instrument">
			<property name="NEXCORE_WORKSPACE" value="${NEXCORE_WORKSPACE}" />
			<property name="ejb-jar.working" value="${ejb-jar.working}" />
		</ant>
	</target>

	<!-- ################################################################## -->
	<!-- ## CleanUp        ################################################ -->
	<!-- ################################################################## -->
	<target name="cleanup" depends="check.property">
		<property name="ejb-jar.working" value="${target}/build/${component.fqId}" />
		<property name="ejb-jar.destfile" value="${ejb-jar.working}.jar" />
		<delete dir="${ejb-jar.working}" failonerror="false" />
		<delete file="${ejb-jar.destfile}" failonerror="false" />
		<!-- build 디렉토리 삭제 -->
		<!-- build가 동시에 될수있으므로 상위 폴더를 삭제하는 것은 우선 막아줍니다. -->
		<!-- delete dir="${target}/build" / -->
		<!-- 꼭 지우고 싶다면 ejb 빌드시  지우는 부분을 이곳으로 복사하여 사용하시면 됩니다. -->

	</target>

</project>
